# Copyright (c) Ultraviolet
# SPDX-License-Identifier: Apache-2.0

apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ .Release.Name }}-auth
  namespace: {{ .Release.Namespace }}
spec:
  strategy:
    {{- if .Values.env.prod }}
    canary:
      steps:
        - setWeight: 20
        - pause: { }
        - setWeight: 40
        - pause: { duration: 2m }
        - setWeight: 60
        - pause: { duration: 2m }
        - setWeight: 80
        - pause: { duration: 2m }
        - setWeight: 100
    {{ else }}
    canary:
      maxSurge: 25%
      maxUnavailable: 0%
    {{- end }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: auth
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.auth.httpPort }}"
        prometheus.io/scrape: "true"
        checksum/config: {{ include (print $.Template.BasePath "/auth-config.yaml") . | sha256sum }}
      labels:
        app: {{ .Release.Name }}
        component: auth
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.auth.image.pullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-auth
          image: "{{ default (printf "%s/auth" .Values.defaults.image.rootRepository) .Values.auth.image.repository }}:{{ default .Values.defaults.image.tag .Values.auth.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.auth.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-auth-env-vars
          env:
            - name: PRISM_AUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: prism-auth-secrets
                  key: PRISM_AUTH_SECRET
            - name: PRISM_AUTH_DB_PASS
              valueFrom:
                secretKeyRef:
                  name: prism-auth-secrets
                  key: PRISM_AUTH_DB_PASS
            - name: PRISM_AUTH_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: prism-auth-secrets
                  key: PRISM_AUTH_SECRET_KEY
            - name: PRISM_SPICEDB_PRE_SHARED_KEY
              valueFrom:
                secretKeyRef:
                  name: prism-shared-spicedb-secrets
                  key: PRISM_SPICEDB_PRE_SHARED_KEY
            - name: PRISM_AUTH_GRPC_CLIENT_CA_CERTS
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: PRISM_AUTH_GRPC_CLIENT_CA_CERTS
            - name: PRISM_AUTH_GRPC_SERVER_CA_CERTS
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_AUTH_GRPC_SERVER_CA_CERTS
            - name: PRISM_AUTH_GRPC_SERVER_CERT
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_AUTH_GRPC_SERVER_CERT
            - name: PRISM_AUTH_GRPC_SERVER_KEY
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_AUTH_GRPC_SERVER_KEY
          ports:
              - containerPort: {{ .Values.auth.httpPort }}
                protocol: TCP
              - containerPort: {{ .Values.auth.grpcPort }}
                protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ 'ALL' ]
            seccompProfile:
              type: RuntimeDefault
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.auth.httpPort }}
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 10
            failureThreshold: 3
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.auth.httpPort }}
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 10
            failureThreshold: 3
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
            - mountPath: /spicedb
              name: spicedb-schema-zed
          resources:
            requests:
              cpu: "125m"
              memory: "128Mi"
            limits:
              cpu: "250m"
              memory: "256Mi"
      volumes:
        - name: spicedb-schema-zed
          configMap:
            defaultMode: 256
            name: {{ .Release.Name }}-spicedb-schema-zed
            optional: false
      {{- with .Values.auth.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.auth.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.auth.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
