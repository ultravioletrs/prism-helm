# Copyright (c) Ultraviolet
# SPDX-License-Identifier: Apache-2.0

apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: {{ .Release.Name }}-backends
spec:
  replicas: 1
  strategy:
    {{- if .Values.env.prod }}
    canary:
      steps:
        - setWeight: 20
        - pause: { }
        - setWeight: 40
        - pause: { duration: 2m }
        - setWeight: 60
        - pause: { duration: 2m }
        - setWeight: 80
        - pause: { duration: 2m }
    {{ else }}
    canary:
      maxSurge: 25%
      maxUnavailable: 25%
    {{- end }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      component: backends
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "{{ .Values.backends.httpPort }}"
        prometheus.io/scrape: "true"
        checksum/config: {{ include (print $.Template.BasePath "/backends-config.yaml") . | sha256sum }}
      labels:
        app: {{ .Release.Name }}
        component: backends
    spec:
      {{- with (default .Values.defaults.image.pullSecrets .Values.ui.image.pullSecrets) }}
      imagePullSecrets:
        {{- range . }}
        - name: {{ .name }}
        {{- end }}
      {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      containers:
        - name: {{ .Release.Name }}-backends
          image: "{{ default (printf "%s/backends" .Values.defaults.image.rootRepository) .Values.backends.image.repository }}:{{ default .Values.defaults.image.tag .Values.backends.image.tag }}"
          imagePullPolicy: {{ default .Values.defaults.image.pullPolicy .Values.backends.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-backends-env-vars
            - secretRef:
                name: {{ .Release.Name }}-backends-secrets
          env:
            - name: SECRET_NAME
              value: "{{ .Release.Name }}-backends-secrets"
            - name: SECRET_NAMESPACE
              value: "{{ .Release.Namespace }}"
            - name: AM_CERTS_SERVICE_HOST
              value: "{{ .Release.Name }}-{{ .Values.amCerts.host }}"
            - name: AM_CERTS_SERVICE_PORT
              value: "{{ .Values.amCerts.httpPort }}"
            - name: PRISM_BACKENDS_DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-backends-secrets
                  key: PRISM_BACKENDS_DB_PASS
            - name: PRISM_AUTH_GRPC_CLIENT_CERT
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: PRISM_AUTH_GRPC_CLIENT_CERT
            - name: PRISM_AUTH_GRPC_CLIENT_KEY
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: PRISM_AUTH_GRPC_CLIENT_KEY
            - name: PRISM_AUTH_GRPC_SERVER_CA_CERTS
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_AUTH_GRPC_SERVER_CA_CERTS
            - name: PRISM_BACKENDS_GRPC_CLIENT_CA_CERTS
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: PRISM_BACKENDS_GRPC_CLIENT_CA_CERTS
            - name: PRISM_BACKENDS_GRPC_SERVER_CA_CERTS
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_BACKENDS_GRPC_SERVER_CA_CERTS
            - name: PRISM_BACKENDS_GRPC_SERVER_CERT
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_BACKENDS_GRPC_SERVER_CERT
            - name: PRISM_BACKENDS_GRPC_SERVER_KEY
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_BACKENDS_GRPC_SERVER_KEY
            - name: PRISM_BACKENDS_HTTP_SERVER_CERT
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_BACKENDS_HTTP_SERVER_CERT
            - name: PRISM_BACKENDS_HTTP_SERVER_KEY
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_BACKENDS_HTTP_SERVER_KEY
            - name: PRISM_CERTS_GRPC_CA_CERTS
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: PRISM_CERTS_GRPC_CA_CERTS
            - name: PRISM_CERTS_GRPC_CLIENT_CERT
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: PRISM_CERTS_GRPC_CLIENT_CERT
            - name: PRISM_CERTS_GRPC_CLIENT_KEY
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: PRISM_CERTS_GRPC_CLIENT_KEY
            - name: PRISM_CERTS_GRPC_SERVER_CA_CERTS
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_CERTS_GRPC_SERVER_CA_CERTS
            - name: PRISM_MANAGER_GRPC_CLIENT_CA_CERTS
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: PRISM_MANAGER_GRPC_CLIENT_CA_CERTS
            - name: PRISM_MANAGER_GRPC_SERVER_CA_CERTS
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_MANAGER_GRPC_SERVER_CA_CERTS
            - name: PRISM_MANAGER_GRPC_SERVER_CA_KEY
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_MANAGER_GRPC_SERVER_CA_KEY
            - name: PRISM_MANAGER_GRPC_SERVER_CERT
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_MANAGER_GRPC_SERVER_CERT
            - name: PRISM_MANAGER_GRPC_SERVER_KEY
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: PRISM_MANAGER_GRPC_SERVER_KEY
            - name: PRISM_USERS_GRPC_CA_CERTS
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: PRISM_USERS_GRPC_CLIENT_CA_CERTS
            - name: PRISM_DOMAINS_GRPC_CLIENT_CERT
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: PRISM_DOMAINS_GRPC_CLIENT_CERT
            - name: PRISM_DOMAINS_GRPC_CLIENT_KEY
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: PRISM_DOMAINS_GRPC_CLIENT_KEY
            - name: PRISM_DOMAINS_GRPC_CLIENT_CA_CERTS
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: PRISM_DOMAINS_GRPC_CLIENT_CA_CERTS
            - name: CERTS_GRPC_CA_CERTS
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: AM_CERTS_GRPC_CLIENT_CA_CERTS
            - name: CERTS_GRPC_CLIENT_CERT
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: AM_CERTS_GRPC_CLIENT_CERT
            - name: CERTS_GRPC_CLIENT_KEY
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-client-certs
                  key: AM_CERTS_GRPC_CLIENT_KEY
            - name: CERTS_GRPC_SERVER_CA_CERTS
              valueFrom:
                secretKeyRef:
                  name: prism-shared-grpc-server-certs
                  key: AM_CERTS_GRPC_SERVER_CA_CERTS

          ports:
            - containerPort: {{ .Values.backends.httpPort }}
              protocol: TCP
            - containerPort: {{ .Values.backends.grpcPort }}
              protocol: TCP
            - containerPort: {{ .Values.backends.cvmsPort }}
              protocol: TCP
          volumeMounts:
            - name: {{ .Release.Name }}-backends-secrets
              mountPath: /etc/secret

            - name: {{ .Release.Name }}-backends-providers-config
              mountPath: /providers/azure.toml
              subPath: azure.toml
              readOnly: true

            - name: {{ .Release.Name }}-backends-providers-config
              mountPath: /providers/gcp.toml
              subPath: gcp.toml
              readOnly: true

            - name: {{ .Release.Name }}-backends-providers-config
              mountPath: /providers/manager.toml
              subPath: manager.toml
              readOnly: true

            - name: {{ .Release.Name }}-backends-providers-config
              mountPath: /providers/gcp/main.tf
              subPath: gcp_main.tf
              readOnly: true

            - name: {{ .Release.Name }}-backends-providers-config
              mountPath: /providers/azure/main.tf
              subPath: azure_main.tf
              readOnly: true

            - name: {{ .Release.Name }}-backends-providers-config
              mountPath: /providers/cloud-init/config.yml
              subPath: cloud_init.yml

            - name: {{ .Release.Name }}-backends-certs-volume
              mountPath: /etc/certs

          resources:
            requests:
              cpu: "125m"
              memory: "128Mi"
            limits:
              cpu: "350m"
              memory: "512Mi"

      initContainers:
        - name: init-certs
          image: alpine:latest
          command: [ "/bin/sh", "-c" ]
          args:
            - |
              # Install Git
              apk update && apk add --no-cache curl bash jq git go make netcat-openbsd

              until nc -z {{ .Release.Name }}-{{ .Values.amCerts.host }} 9010; do
                echo "Waiting for Prism AM Certs to be ready...";
                sleep 2;
              done
              echo "Prism AM Certs is up. Running cert script...";
              cp /scripts/provision_certs.sh /tmp/provision_certs.sh
              # Check if the file was copied correctly
              if [ -f /tmp/provision_certs.sh ]; then
                echo "Script copied successfully to /tmp."
                chmod +x /tmp/provision_certs.sh
              else
                echo "Failed to copy the script to /tmp."
                exit 1
              fi
              echo "Running script"
              /tmp/provision_certs.sh

          volumeMounts:
            - name: {{ .Release.Name }}-backends-certs-volume
              mountPath: /etc/certs
            - name: {{ .Release.Name }}-cvms-cert-init-script
              mountPath: /scripts
              readOnly: false

      volumes:
        - name: {{ .Release.Name }}-backends-secrets
          secret:
            secretName: {{ .Release.Name }}-backends-secrets
        - name: {{ .Release.Name }}-backends-providers-config
          configMap:
            name: {{ .Release.Name }}-backends-providers-config-files
        - name: {{ .Release.Name }}-cvms-cert-init-script
          configMap:
            name: {{ .Release.Name }}-backends-cvms-cert-init-script
        - name: {{ .Release.Name }}-backends-certs-volume
          emptyDir: {}
