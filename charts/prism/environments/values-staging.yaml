# Copyright (c) Ultraviolet
# SPDX-License-Identifier: Apache-2.0

---
# Global configuration
defaults:
  logLevel: "info"
  image:
    pullSecrets:
      - name: ghcr-secret
    pullPolicy: "Always"
    rootRepository: "prism"
    tag: "latest"
  replicaCount: 1
  natsPort: 4222
  jaegerCollectorPort: 4318
  jaegerTraceRatio: 1.0
  sendTelemetry: true
  eventStreamURL: "nats:4222"

traefik:
  dashboard:
    enabled: true

auth:
  logLevel: "info"
  image:
    pullSecrets:
      - name: ghcr-secret
    repository: "ghcr.io/ultravioletrs/prism/auth"
    tag: "latest"
    pullPolicy: "Always"
  httpPort: 8189
  grpcPort: 8181
  host: "auth"
  accessTokenDuration: "1h"
  refreshTokenDuration: "24h"
  invitationDuration: "168h"
  nodeSelector: {}
  affinity: {}
  tolerations: {}
  sslMode: "disable"
  calloutUrls: "auth"
  calloutMethod: "POST"
  tlsVerification: "false"
  timeout: "10s"
  invokePermissions: "create_computation_permission,run_permission,create_cvms_permission,add_role_users_permission"

postgresqlauth:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-auth
  host: postgresql-auth
  port: &postgresqlAuthPort 5432
  database: &postgresqlAuthDatabase auth
  username: &postgresqlAuthUsername magistrala
  global:
    postgresql:
      auth:
        username: *postgresqlAuthUsername
        database: *postgresqlAuthDatabase
        existingSecret: prism-auth-secrets
        secretKeys:
          adminPasswordKey: PRISM_AUTH_DB_PASS
          userPasswordKey: PRISM_AUTH_DB_PASS
      service:
        ports:
          postgresql: *postgresqlAuthPort
  primary:
    resourcesPreset: ""
    resources:
      requests:
        cpu: "125m"
        memory: "128Mi"
      limits:
        cpu: "250m"
        memory: "256Mi"

postgresqldomains:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-domains
  host: postgresql-domains
  port: &postgresqlDomainsPort 5432
  database: &postgresqlDomainsDatabase domains
  username: &postgresqlDomainsUsername prism
  global:
    postgresql:
      auth:
        username: *postgresqlDomainsUsername
        database: *postgresqlDomainsDatabase
        existingSecret: prism-domains-secrets
        secretKeys:
          adminPasswordKey: SMQ_DOMAINS_DB_PASS
          userPasswordKey: SMQ_DOMAINS_DB_PASS
      service:
        ports:
          postgresql: *postgresqlDomainsPort
  primary:
    resourcesPreset: ""
    resources:
      requests:
        cpu: "125m"
        memory: "128Mi"
      limits:
        cpu: "250m"
        memory: "256Mi"

metrics-server:
  args:
    - --kubelet-insecure-tls

domains:
  image:
    pullSecrets:
      - name: ghcr-secret
    repository: "supermq/domains"
    tag: "latest"
    pullPolicy: "Always"
  httpPort: 9013
  grpcPort: 7013
  redisTCPPort: 6379
  host: "domains"
  redisUrl: "redis://domains-redis-master:6379/0"
  sendTelemetry: false
  logLevel: "info"
  jaegerTraceRatio: 1.0

redis-clients:
  fullnameOverride: domains-redis
  volumePermissions:
    enabled: true
  auth:
    enabled: false
  replica:
    replicaCount: 1

users:
  image:
    pullSecrets:
      - name: ghcr-secret
    repository: "supermq/users"
    tag: "latest"
    pullPolicy: "Always"
  httpPort: 9003
  grpcPort: 7005
  mgGrpcPort: 7005
  host: "users"
  secretKey: "secretKey"
  passwordRegex: "^.{8,}$"
  tokenResetEndpoint: "/reset-request"
  allowSelfRegister: true
  deleteInterval: "24h"
  deleteAfter: "720h"
  sendTelemetry: false
  logLevel: "info"
  jaegerTraceRatio: 1.0

postgresqlusers:
  ## If you want to use an external database, set this to false and change host & port
  enabled: true
  name: postgresql-users
  host: postgresql-users
  port: &postgresqlUsersPort 5432
  database: &postgresqlUsersDatabase users
  username: &postgresqlUsersUsername prism
  global:
    postgresql:
      auth:
        username: *postgresqlUsersUsername
        database: *postgresqlUsersDatabase
        existingSecret: prism-users-secrets
        secretKeys:
          adminPasswordKey: SMQ_USERS_DB_PASS
          userPasswordKey: SMQ_USERS_DB_PASS
      service:
        ports:
          postgresql: *postgresqlUsersPort
  primary:
    resourcesPreset: ""
    resources:
      requests:
        cpu: "125m"
        memory: "128Mi"
      limits:
        cpu: "250m"
        memory: "256Mi"

jaeger:
  fullnameOverride: prism-jaeger
  provisionDataStore:
    cassandra: false # Disable Cassandra provisioning
  agent:
    enabled: false
  allInOne:
    enabled: false
  storage:
    type: memory # Use in-memory storage
  collector:
    service:
      otlp:
        grpc:
          name: otlp-grpc
          port: 4317
        http:
          name: otlp-http
          port: 4318
  query:
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 256m
        memory: 128Mi

nats:
  config:
    cluster:
      enabled: false
      replicas: 3
    jetstream:
      enabled: true
      fileStore:
        enabled: true
        pvc:
          enabled: true
      memoryStore:
        enabled: true
        maxSize: 2Gi
  container:
    env:
      # different from k8s units, suffix must be B, KiB, MiB, GiB, or TiB
      # should be ~90% of memory limit
      GOMEMLIMIT: 7GiB
    merge:
      # recommended limit is at least 2 CPU cores and 8Gi Memory for production JetStream clusters
      resources:
        requests:
          cpu: "125m"
          memory: "128Mi"
        limits:
          cpu: "250m"
          memory: "512Mi"

spicedb:
  # replicaCount: 1
  image:
    pullSecrets: {}
    repository: authzed/spicedb
    tag: latest
    pullPolicy: "IfNotPresent"
  grpc:
    port: 50051
  host: "spicedb"
  datastore:
    ## engine can be any one of the two options: postgres (default) , memory
    engine: postgres
  dispatch:
    port: 50053
    enabled: false
  http:
    enabled: false
    port: 8080
  metrics:
    enabled: true
    port: 9090
  nodeSelector: {}
  affinity: {}
  tolerations: {}
  replicaCount: 1
  schemaFile: /spicedb/schema.zed

postgresqlspicedb:
  ## If you want to use an external database, set this to false and change host & port
  enabled: true
  name: postgresql-spicedb
  host: postgresql-spicedb
  port: &postgresqlSpicedbPort 5432
  database: &postgresqlSpicedbDatabase spicedb
  username: &postgresqlSpicedbUsername magistrala
  global:
    postgresql:
      auth:
        username: *postgresqlSpicedbUsername
        database: *postgresqlSpicedbDatabase
        existingSecret: prism-spicedb-db-secrets
        secretKeys:
          adminPasswordKey: PRISM_SPICEDB_DB_PASS
          userPasswordKey: PRISM_SPICEDB_DB_PASS
      service:
        ports:
          postgresql: *postgresqlSpicedbPort
  primary:
    resourcesPreset: ""
    resources:
      requests:
        cpu: "125m"
        memory: "128Mi"
      limits:
        cpu: "250m"
        memory: "256Mi"

computations:
  image:
    pullSecrets:
      - name: ghcr-secret
    repository: "ghcr.io/ultravioletrs/prism/computations"
    tag: "latest"
    pullPolicy: "Always"
  httpPort: 9000
  logLevel: "info"
  host: "computations"

postgresqlcomputations:
  enabled: true
  name: postgresql-computations
  host: postgresql-computations
  port: &postgresqlComputationsPort 5432
  database: &postgresqlComputationsDatabase computations
  username: &postgresqlComputationsUsername prism
  global:
    postgresql:
      auth:
        username: *postgresqlComputationsUsername
        database: *postgresqlComputationsDatabase
        existingSecret: prism-computations-secrets
        secretKeys:
          adminPasswordKey: PRISM_COMPUTATIONS_DB_PASS
          userPasswordKey: PRISM_COMPUTATIONS_DB_PASS
      service:
        ports:
          postgresql: *postgresqlComputationsPort
  primary:
    resourcesPreset: ""
    resources:
      requests:
        cpu: "125m"
        memory: "128Mi"
      limits:
        cpu: "250m"
        memory: "256Mi"

backends:
  image:
    pullSecrets:
      - name: ghcr-secret
    repository: "ghcr.io/ultravioletrs/prism/backends"
    tag: "latest"
    pullPolicy: "Always"
  httpPort: 9011
  grpcPort: 7006
  managerGrpcHost: "109.92.195.153"
  managerGrpcPort: "6101"
  managerSNPGrpcPort: 6101
  managerSNPGrpcHost: "109.92.195.153"
  managerTDXGrpcPort: 49201
  managerTDXGrpcHost: "109.92.195.153"
  host: "backends"
  logLevel: "info"
  cvmsPort: 7018

postgresqlbackends:
  enabled: true
  name: postgresql-backends
  host: postgresql-backends
  port: &postgresqlBackendsPort 5432
  database: &postgresqlBackendsDatabase backends
  username: &postgresqlBackendsUsername prism
  global:
    postgresql:
      auth:
        username: *postgresqlBackendsUsername
        database: *postgresqlBackendsDatabase
        existingSecret: prism-backends-secrets
        secretKeys:
          adminPasswordKey: PRISM_BACKENDS_DB_PASS
          userPasswordKey: PRISM_BACKENDS_DB_PASS
      service:
        ports:
          postgresql: *postgresqlBackendsPort
  primary:
    resourcesPreset: ""
    resources:
      requests:
        cpu: "125m"
        memory: "128Mi"
      limits:
        cpu: "250m"
        memory: "256Mi"

postgresqlbilling:
  enabled: true
  name: postgresql-billing
  host: postgresql-billing
  port: &postgresqlBillingPort 5432
  database: &postgresqlBillingDatabase billing
  username: &postgresqlBillingUsername prism
  global:
    postgresql:
      auth:
        username: *postgresqlBillingUsername
        database: *postgresqlBillingDatabase
        existingSecret: prism-billing-secrets
        secretKeys:
          adminPasswordKey: MG_BILLING_DB_PASS
          userPasswordKey: MG_BILLING_DB_PASS
      service:
        ports:
          postgresql: *postgresqlBillingPort
  primary:
    resourcesPreset: ""
    resources:
      requests:
        cpu: "125m"
        memory: "128Mi"
      limits:
        cpu: "250m"
        memory: "256Mi"

postgresqlcvmbilling:
  enabled: true
  name: postgresql-cvm-billing
  host: postgresql-cvm-billing
  port: &postgresqlBillingPort 5432
  database: &postgresqlBillingDatabase cvm-billing-db
  username: &postgresqlBillingUsername prism
  global:
    postgresql:
      auth:
        username: *postgresqlBillingUsername
        database: *postgresqlBillingDatabase
        existingSecret: prism-cvm-billing-secrets
        secretKeys:
          adminPasswordKey: PRISM_CVM_BILLING_DB_PASS
          userPasswordKey: PRISM_CVM_BILLING_DB_PASS
      service:
        ports:
          postgresql: *postgresqlBillingPort
  primary:
    resourcesPreset: ""
    resources:
      requests:
        cpu: "125m"
        memory: "128Mi"
      limits:
        cpu: "250m"
        memory: "256Mi"

amCerts:
  image:
    pullSecrets:
      - name: ghcr-secret
    repository: "ghcr.io/absmach/certs"
    tag: "latest"
    pullPolicy: "Always"
  httpPort: 9010
  grpcPort: 7012
  logLevel: "info"
  host: "am-certs"
  sslMode: "disable"

certs:
  image:
    pullSecrets:
      - name: ghcr-secret
    repository: "ghcr.io/ultravioletrs/prism/certs"
    tag: "latest"
    pullPolicy: "Always"
  httpPort: 8090
  grpcPort: 7008
  logLevel: "info"
  host: "certs"

billing:
  image:
    pullSecrets:
      - name: ghcr-secret
    repository: "ghcr.io/absmach/amdm/billing"
    tag: "prism-v0.17.0"
    pullPolicy: "Always"
  httpPort: 9022
  grpcPort: 7022
  logLevel: "info"
  host: "billing"
  enabled: true

cvmbilling:
  image:
    pullSecrets:
      - name: ghcr-secret
    repository: "ghcr.io/ultravioletrs/prism/cvm-billing"
    tag: "latest"
    pullPolicy: "Always"
  httpPort: 9022
  grpcPort: 7022
  logLevel: "info"
  host: "billing"
  enabled: true

callouts:
  method: "POST"
  operations:
    prism: "create_computation,run_computation,create_cvm"
    smqdomains: "oPAcceptInvitation,OpRoleAddMembers,OpDisableDomain"

postgresqlamcerts:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-am-certs
  host: postgresql-am-certs
  port: &postgresqlAMCertsPort 5432
  database: &postgresqlAMCertsDatabase certs
  username: &postgresqlAMCertsUsername prism
  global:
    postgresql:
      auth:
        username: *postgresqlAMCertsUsername
        database: *postgresqlAMCertsDatabase
        existingSecret: prism-am-certs-secrets
        secretKeys:
          adminPasswordKey: AM_CERTS_DB_PASS
          userPasswordKey: AM_CERTS_DB_PASS
      service:
        ports:
          postgresql: *postgresqlAMCertsPort
  primary:
    resourcesPreset: ""
    resources:
      requests:
        cpu: "125m"
        memory: "128Mi"
      limits:
        cpu: "250m"
        memory: "256Mi"

ui:
  image:
    repository: "ghcr.io/ultravioletrs/prism/ui"
    tag: "latest"
    pullPolicy: "Always"
    pullSecrets:
      - name: ghcr-secret
  httpPort: 9095

  # Application-specific settings
  logLevel: "debug" # Set the logging level for the UI application
  instanceId: "" # Instance ID, if applicable
  pathPrefix: "/ui" # Path prefix for the UI
  computationsPathPrefix: "/computations" # Path prefix for computations
  domainsUrl: "http://auth:8189" # The URL for domain (auth) service
  billingUrl: "http://billing:9022" # Billing service URL with environment variable interpolation
  returnUrl: "/ui/payment-success"

deployments:
  - users
  - billing
  - auth
  - certs
  - am-certs
  - computations
  - ui
  - domains
  - cvm-billing

env:
  prod: false

prometheus:
  enabled: true
  fullnameOverride: prism-monitoring-stack
  prometheus:
    prometheusSpec:
      routePrefix: "/prometheus"
      externalUrl: "https://staging.prism.ultraviolet.rs/prometheus/"
      podMonitorSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      replicas: 1
      retention: 5d
      additionalAlertRelabelConfigs:
        - action: drop
          source_labels: [ alertname, namespace ]
          regex: '(KubePodNotReady|KubeDeploymentRolloutStuck|KubeStatefulSetReplicasMismatch|KubeContainerWaiting);kube-prometheus-stack'
      additionalScrapeConfigs:
        - job_name: "prism"
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - source_labels:
                [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true

            - source_labels:
                [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)

            - source_labels:
                [
                  __address__,
                  __meta_kubernetes_pod_annotation_prometheus_io_port,
                ]
              action: replace
              target_label: __address__
              regex: ([^:]+):(\d+);(\d+)
              replacement: ${1}:${3}

            - source_labels:
                [
                  __meta_kubernetes_pod_label_app,
                  __meta_kubernetes_pod_label_component,
                ]
              action: keep
              regex: prism-staging;.*

            - source_labels:
                [
                  __meta_kubernetes_pod_label_app,
                  __meta_kubernetes_pod_label_component,
                ]
              action: replace
              target_label: instance
              regex: ([^;]+);(.*)
              replacement: ${1}_${2}

            - source_labels: [__meta_kubernetes_pod_label_app]
              action: replace
              target_label: service_name

            - source_labels: [__meta_kubernetes_pod_label_component]
              action: replace
              target_label: component
              regex: (.*)
              replacement: ${1}

            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: namespace

            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: pod_name

        - job_name: 'cocos-manager-tdx'
          static_configs:
            - targets: ['109.92.195.153:6101']
          metrics_path: /metrics
          scrape_interval: 10s
          scrape_timeout: 5s
        - job_name: 'cocos-manager-snp'
          static_configs:
            - targets: ['109.92.195.153:49201']
          metrics_path: /metrics
          scrape_interval: 10s
          scrape_timeout: 5s

  defaultRules:
    create: true
    appNamespacesOperator: "!~"
    appNamespacesTarget: kube-prometheus-stack
    rules:
      kubernetesApps: true
      kubernetesResources: true
      kubernetesStorage: true
      node: true
      network: true
      alertmanager: false
      etcd: false
      configReloaders: false
      general: false
      k8sContainerCpuUsageSecondsTotal: false
      k8sContainerMemoryCache: false
      k8sContainerMemoryRss: false
      k8sContainerMemorySwap: false
      k8sContainerResource: false
      k8sContainerMemoryWorkingSetBytes: false
      k8sPodOwner: false
      kubeApiserverAvailability: false
      kubeApiserverBurnrate: false
      kubeApiserverHistogram: false
      kubeApiserverSlos: false
      kubeControllerManager: false
      kubelet: false
      kubeProxy: false
      kubePrometheusGeneral: false
      kubePrometheusNodeRecording: false
      kubeStateMetrics: false
      kubeSchedulerAlerting: false
      kubeSchedulerRecording: false
      nodeExporterAlerting: false
      nodeExporterRecording: false
      prometheus: false
      prometheusOperator: false
      windows: false
    disabled:
      KubePodNotReady: true
      KubeDeploymentRolloutStuck: true
      KubeStatefulSetReplicasMismatch: true
      KubeContainerWaiting: true
      KubeCPUThrottlingHigh: true
      CPUThrottlingHigh: true
  crds:
    enabled: true
    upgradeJob:
      enabled: true
  nodeExporter:
    enabled: true
  alertmanager:
    enabled: true
    alertmanagerSpec:
      configSecret: alertmanager-config
  kubeStateMetrics:
    enabled: true
  grafana:
    sidecar:
      dashboards:
        enabled: true
        label: grafana_dashboard
        labelValue: "1"
        searchNamespace: ALL
    admin:
      existingSecret: prism-prometheus-secrets
      userKey: GRAFANA_ADMIN_USER
      passwordKey: GRAFANA_ADMIN_PASSWORD
    ingress:
      enabled: false
    grafana.ini:
      server:
        root_url: "https://staging.prism.ultraviolet.rs/grafana"
        serve_from_sub_path: false
      auth.ldap:
        enabled: false
        allow_sign_up: false

argorollouts:
  enabled: true
  fullnameOverride: prism-argorollouts
  dashboard:
    enabled: true
  installCRDs: false

fluentbit:
  enabled: true
  kind: DaemonSet
  rbac:
    create: true
  serviceAccount:
    create: true
    name: "prism-fluent-bit-sa"
  extraVolumes:
    - name: prism-fluentbit-opensearch-client-certs
      secret:
        secretName: prism-opensearch-dashboards-client-certs
  extraVolumeMounts:
    - name: prism-fluentbit-opensearch-client-certs
      mountPath: /fluent-bit/etc/prism
  config:
    service: |
      [SERVICE]
          Flush         5
          Log_Level     info
          Daemon        off
          Parsers_File  /fluent-bit/etc/parsers.conf
          Parsers_File  /fluent-bit/etc/conf/custom_parsers.conf
          HTTP_Server   On
          HTTP_Listen   0.0.0.0
          HTTP_Port     2020
    inputs: |
      [INPUT]
          Name              tail
          Path              /var/log/containers/*.log
          Tag               kube.*
          Parser            cri
          DB                /var/log/flb_kube.db
          Refresh_Interval  5
          Rotate_Wait       30
          Mem_Buf_Limit     50MB
          Skip_Long_Lines   On
    filters: |
      [FILTER]
          Name      kubernetes
          Match     *
          Merge_Log On
          Keep_Log  Off
      [FILTER]
          Name          parser
          Match         *
          Key_Name      log
          Parser        json_log
          Reserve_Data On
      [FILTER]
          Name          modify
          Match         *
          Condition     Key_Exists level
          Remove        log
    outputs: |
      [OUTPUT]
          Name                  opensearch
          Match                 *
          Host                  opensearch-cluster-master
          Port                  9200
          HTTP_User             admin
          HTTP_Passwd           admin
          Index                 prism-logs
          Type                  _doc
          Logstash_Format       On
          Logstash_Prefix       prism-logs
          Logstash_DateFormat   %Y.%m.%d
          Suppress_Type_Name    On
          Buffer_Size           2MB
          Replace_Dots          On
          Retry_Limit           False
          tls                   On
          tls.verify            Off
          tls.verify_hostname   Off
          tls.ca_file           /fluent-bit/etc/prism/ca.pem
          tls.crt_file          /fluent-bit/etc/prism/cert.pem
          tls.key_file          /fluent-bit/etc/prism/key.pem
    customParsers: |
      [PARSER]
          Name          json_log
          Format        json
          Time_Key      time
          Time_Format   %Y-%m-%dT%H:%M:%S.%N%z
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

opensearch:
  clusterName: opensearch-cluster
  config:
    opensearch.yml: |
      cluster.name: opensearch-cluster
      network.host: "0.0.0.0"
      bootstrap.memory_lock: false
      indices.query.bool.max_clause_count: 1024
      plugins.security.ssl.transport.pemcert_filepath: prism/cert.pem
      plugins.security.ssl.transport.pemkey_filepath: prism/key.pem
      plugins.security.ssl.transport.pemtrustedcas_filepath: prism/ca.pem
      plugins.security.ssl.transport.enforce_hostname_verification: false
      plugins.security.ssl.http.enabled: true
      plugins.security.ssl.http.pemcert_filepath: prism/cert.pem
      plugins.security.ssl.http.pemkey_filepath: prism/key.pem
      plugins.security.ssl.http.pemtrustedcas_filepath: prism/ca.pem
      plugins.security.authcz.admin_dn:
        - CN=A,OU=Ultraviolet,O=prism_ca,L=Belgrade,ST=Bulevar_Arsenija,C=RS
      plugins.security.nodes_dn:
        - CN=Ultraviolet_Selfsigned,OU=Ultraviolet,O=prism_opensearch_node,L=Belgrade,ST=Bulevar_Arsenija,C=RS

  extraEnvs:
    - name: OPENSEARCH_INITIAL_ADMIN_PASSWORD
      value: Skjf&k-m17Has@s)#

  extraVolumes:
  - name: prism-opensearch-certs
    secret:
      secretName: prism-opensearch-certs

  extraVolumeMounts:
    - name: prism-opensearch-certs
      mountPath: /usr/share/opensearch/config/prism
  persistence:
    accessModes:
      - ReadWriteOnce
    annotations: { }
    enableInitChown: true
    enabled: true
    labels:
      additionalLabels: { }
      enabled: false
    size: 20Gi
  replicas: 2
  resources:
    requests:
      cpu: 300m
      memory: 512Mi
    limits:
      memory: "4Gi"
      cpu: "2"
  roles:
    - ingest
    - data
    - remote_cluster_client
    - cluster_manager
  singleNode: false
  enabled: true

opensearchdashboards:
  enabled: true
  config:
    opensearch_dashboards.yml: |
      server.basePath: "/opensearch"
      server.rewriteBasePath: true
      server.host: '0.0.0.0'
      server.ssl.enabled: false
      server.ssl.certificate: /usr/share/opensearch-dashboards/config/prism/cert.pem
      server.ssl.key: /usr/share/opensearch-dashboards/config/prism/key.pem
      opensearch.hosts: ["https://localhost:9200"]
      opensearch.ssl.verificationMode: none
      opensearch.ssl.certificateAuthorities: [ "/usr/share/opensearch-dashboards/config/prism/ca.pem"]
      #opensearch.username: "kibanaserver"
      #opensearch.password: "kibanaserver"
      opensearch.requestHeadersAllowlist: [ authorization,securitytenant ]
      opensearch_security.multitenancy.enabled: false
      #opensearch_security.multitenancy.tenants.preferred: ["Private", "Global"]
      opensearch_security.readonly_mode.roles: ["kibana_read_only"]
      opensearch_security.cookie.secure: true
      opensearch_security.enabled: true
      opensearch_security.auth.multiple_auth_enabled: true
      opensearch_security.auth.type: ["basicauth"]
  extraVolumes:
    - name: prism-opensearch-dashboards-client-certs
      secret:
        secretName: prism-opensearch-dashboards-client-certs
  extraVolumeMounts:
    - name: prism-opensearch-dashboards-client-certs
      mountPath: /usr/share/opensearch-dashboards/config/prism
  extraEnvs:
    - name: OPENSEARCH_USERNAME
      valueFrom:
        secretKeyRef:
          name: opensearch-auth-secret
          key: OPENSEARCH_USERNAME
    - name: OPENSEARCH_PASSWORD
      valueFrom:
        secretKeyRef:
          name: opensearch-auth-secret
          key: OPENSEARCH_PASSWORD
  fullnameOverride: "prism-opensearch-dashboards"
  opensearchDashboardsYml:
    defaultMode: null
  opensearchHosts: https://opensearch-cluster-master:9200
  replicaCount: 1
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 300m
      memory: 512M


externalsecrets:
  defaultRefresh: "1h"
  enabled: false
  installCRDs: true

argocd:
  enabled: true
  enableTraefikConfig: true
