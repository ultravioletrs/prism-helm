# Copyright (c) Ultraviolet
# SPDX-License-Identifier: Apache-2.0

# Global configuration
defaults:
  logLevel: "info"
  image:
    pullPolicy: "IfNotPresent"
    rootRepository: "magistrala"
    tag: "latest"
    # pullSecrets: {}
  replicaCount: 1
  natsPort: 4222
  jaegerCollectorPort: 4318
  jaegerTraceRatio: 1.0
  sendTelemetry: true
  eventStreamURL: "prism-dev-nats:4222"

envoy:
  image:
    pullPolicy: "IfNotPresent"
    repository: "envoyproxy/envoy"
    tag: "v1.31-latest"

auth:
  # logLevel: error
  image: {}
    # pullSecrets: {}
    # rootRepository: "magistrala/auth"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  # Log level for the auth service. Common options are "debug", "info", "warn", "error".
  # jaegerTraceRatio: 1.0
  # sendTelemetry: true
  httpPort: 8189
  grpcPort: 8181
  secret: "supersecret"
  adminEmail: "admin@example.com"
  adminPassword: "12345678"
  accessTokenDuration: "1h"
  refreshTokenDuration: "24h"
  invitationDuration: "168h"
  nodeSelector: {}
  affinity: {}
  tolerations: {}

postgresqlauth:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-auth
  host: postgresql-auth
  port: &postgresqlAuthPort 5432
  database: &postgresqlAuthDatabase auth
  username: &postgresqlAuthUsername magistrala
  password: &postgresqlAuthPassword magistrala
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlAuthPassword
        username: *postgresqlAuthUsername
        password: *postgresqlAuthPassword
        database: *postgresqlAuthDatabase
      service:
        ports:
          postgresql: *postgresqlAuthPort

users:
  image: {}
     # pullSecrets: {}
     # repository: "magistrala/users"
     # tag: "latest"
     # pullPolicy: "IfNotPresent"
  # jaegerTraceRatio: 1.0
  # sendTelemetry: true
  # logLevel: "info"
  httpPort: 9002
  grpcPort: 7001
  adminEmail: "admin@example.com"
  adminPassword: "12345678"
  secretKey: "secretKey"
  passwordRegex: "^.{8,}$"
  tokenResetEndpoint: "/reset-request"
  allowSelfRegister: true
  deleteInterval: "24h"
  deleteAfter: "720h"
  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

postgresqlusers:
  ## If you want to use an external database, set this to false and change host & port
  enabled: true
  name: postgresql-users
  host: postgresql-users
  port: &postgresqlUsersPort 5432
  database: &postgresqlUsersDatabase users
  username: &postgresqlUsersUsername magistrala
  password: &postgresqlUsersPassword magistrala
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlUsersPassword
        username: *postgresqlUsersUsername
        password: *postgresqlUsersPassword
        database: *postgresqlUsersDatabase
      service:
        ports:
          postgresql: *postgresqlUsersPort

jaeger:
  fullnameOverride: magistrala-jaeger
  provisionDataStore:
    cassandra: true
  agent:
    enabled: false
  allInOne:
    enabled: false
  storage:
    type: memory
  collector:
    service:
      otlp:
        grpc:
          name: otlp-grpc
          port: 4317
        http:
          name: otlp-http
          port: 4318

nats:
  config:
    cluster:
      enabled: false
      replicas: 3
    jetstream:
      enabled: true
      fileStore:
        enabled: true
        pvc:
          enabled: true
      memoryStore:
        enabled: true
        maxSize: 2Gi

spicedb:
  # replicaCount: 1
  image:
    pullSecrets: {}
    repository: authzed/spicedb
    tag: latest
    # pullPolicy: "IfNotPresent"
  grpc:
    presharedKey: "helloworld"
    port: 50051
  datastore:
    ## engine can be any one of the two options: postgres (default) , memory
    engine: postgres
  dispatch:
    port: 50053
    enabled: false
  http:
    enabled: false
    port: 8443
  metrics:
    enabled: true
    port: 9090
  nodeSelector: {}
  affinity: {}
  tolerations: {}

postgresqlspicedb:
  ## If you want to use an external database, set this to false and change host & port
  enabled: true
  name: postgresql-spicedb
  host: postgresql-spicedb
  port: &postgresqlSpicedbPort 5432
  database: &postgresqlSpicedbDatabase spicedb
  username: &postgresqlSpicedbUsername magistrala
  password: &postgresqlSpicedbPassword magistrala
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlSpicedbPassword
        username: *postgresqlSpicedbUsername
        password: *postgresqlSpicedbPassword
        database: *postgresqlSpicedbDatabase
      service:
        ports:
          postgresql: *postgresqlSpicedbPort

computations:
  image: {}
    # pullSecrets: {}
    # repository: "prism/computations"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  httpPort: 9000
  authGrpcPort: 7000
  authHttpPort: 9001
  # logLevel: "info"
  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

postgresqlcomputations:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-computations
  host: postgresql-computations
  port: &postgresqlComputationsPort 5432
  database: &postgresqlComputationsDatabase computations
  username: &postgresqlComputationsUsername prism
  password: &postgresqlComputationsPassword prism
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlComputationsPassword
        username: *postgresqlComputationsUsername
        password: *postgresqlComputationsPassword
        database: *postgresqlComputationsDatabase
      service:
        ports:
          postgresql: *postgresqlComputationsPort

backends:
  image: {}
    # pullSecrets: {}
    # repository: "prism/backends"
    # tag: "latest"
    # pullPolicy: "IfNotPresent"
  httpPort: 9011
  authGrpcPort: 7006
  # logLevel: "info"
  # nodeSelector: {}
  # affinity: {}
  # tolerations: {}

postgresqlbackends:
  ## If you want to use an external database, set this to false and change host & port to external postgresql server host & port respectively
  enabled: true
  name: postgresql-backends
  host: postgresql-backends
  port: &postgresqlBackendsPort 5432
  database: &postgresqlBackendsDatabase backends
  username: &postgresqlBackendsUsername prism
  password: &postgresqlBackendsPassword prism
  global:
    postgresql:
      auth:
        postgresPassword: *postgresqlBackendsPassword
        username: *postgresqlBackendsUsername
        password: *postgresqlBackendsPassword
        database: *postgresqlBackendsDatabase
      service:
        ports:
          postgresql: *postgresqlBackendsPort